{
  "name": "babelify",
  "description": "Babel browserify transform",
  "version": "5.0.4",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "homepage": "https://github.com/babel/babelify",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babelify.git"
  },
  "bugs": {
    "url": "https://github.com/babel/babelify/issues"
  },
  "dependencies": {
    "babel-core": "^4.0.0",
    "through": "2.3.4",
    "lodash": "^3.0.0"
  },
  "readme": "# babelify\n\n[Babel](https://github.com/babel/babel) [browserify](https://github.com/substack/node-browserify) transform\n\n## Installation\n\n    $ npm install --save-dev babelify\n\n## Usage\n\n### CLI\n\n    $ browserify script.js -t babelify --outfile bundle.js\n\n### Node\n\n```javascript\nvar fs = require(\"fs\");\nvar browserify = require(\"browserify\");\nvar babelify = require(\"babelify\");\nbrowserify({ debug: true })\n  .transform(babelify)\n  .require(\"./script.js\", { entry: true })\n  .bundle()\n  .on(\"error\", function (err) { console.log(\"Error : \" + err.message); })\n  .pipe(fs.createWriteStream(\"bundle.js\"));\n```\n\n#### [Options](https://babeljs.io/docs/usage/options)\n\n```javascript\nbrowserify().transform(babelify.configure({\n  blacklist: [\"regenerator\"]\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ babelify --blacklist regenerator ]\n```\n\n#### Enable Experimental Transforms\n\nBy default Babel's [experimental transforms](http://babeljs.io/docs/usage/transformers/#es7-experimental-)\nare disabled. You can turn them on by passing `experimental` as a configuration option.\n\n```javascript\nbrowserify().transform(babelify.configure({\n  experimental: true\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ babelify --experimental ]\n```\n\n#### Customising extensions\n\nBy default all files with the extensions `.js`, `.es`, `.es6` and `.jsx` are compiled.\nYou can change this by passing an array of extensions.\n\n**NOTE:** This will override the default ones so if you want to use any of them\nyou have to add them back.\n\n```javascript\nbrowserify().transform(babelify.configure({\n  extensions: [\".babel\"]\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ babelify --extensions .babel ]\n```\n\n#### Relative source maps\n\nBrowserify passes an absolute path so there's no way to determine what folder\nit's relative to. You can pass a relative path that'll be removed from the\nabsolute path with the `sourceMapRelative` option.\n\n```javascript\nbrowserify().transform(babelify.configure({\n  sourceMapRelative: \"/Users/sebastian/Projects/my-cool-website/assets\"\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ babelify --sourceMapRelative . ]\n```\n\n#### Additional options\n\n```javascript\nbrowserify().transform(babelify.configure({\n  // Optional ignore regex - if any filenames **do** match this regex then they\n  // aren't compiled\n  ignore: /regex/,\n\n  // Optional only regex - if any filenames **don't** match this regex then they\n  // aren't compiled\n  only: /my_es6_folder/\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ babelify --ignore regex --only my_es6_folder ]\n```\n\n#### ES6 Polyfill\n\nAs a convenience, the babelify polyfill is exposed in babelify. If you've got\na browserify-only package this may alleviate the necessity to have\n*both* babel & babelify installed.\n\n```javascript\n// In browser code\nrequire(\"babelify/polyfill\");\n```\n\n## FAQ\n\n### Why aren't files in `node_modules` being transformed?\n\nThis is default browserify behaviour and **can not** be overriden. A possible solution is to add:\n\n```json\n{\n  \"browserify\": {\n    \"transform\": [\"babelify\"]\n  }\n}\n```\n\nto the root of all your modules `package.json` that you want to be transformed. If you'd like to\nspecify options then you can use:\n\n```json\n{\n  \"browserify\": {\n    \"transform\": [[\"babelify\", { \"experimental\": true }]]\n  }\n}\n```\n",
  "readmeFilename": "README.md",
  "_id": "babelify@5.0.4",
  "_from": "babelify@"
}
